// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.10
// source: video.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VideoRpc_GetAuthorId_FullMethodName      = "/video.VideoRpc/GetAuthorId"
	VideoRpc_GetVideoListInfo_FullMethodName = "/video.VideoRpc/GetVideoListInfo"
)

// VideoRpcClient is the client API for VideoRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoRpcClient interface {
	GetAuthorId(ctx context.Context, in *GetAuthorIdReq, opts ...grpc.CallOption) (*GetAuthorIdResp, error)
	GetVideoListInfo(ctx context.Context, in *GetVideoListInfoReq, opts ...grpc.CallOption) (*GetVideoListInfoResp, error)
}

type videoRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoRpcClient(cc grpc.ClientConnInterface) VideoRpcClient {
	return &videoRpcClient{cc}
}

func (c *videoRpcClient) GetAuthorId(ctx context.Context, in *GetAuthorIdReq, opts ...grpc.CallOption) (*GetAuthorIdResp, error) {
	out := new(GetAuthorIdResp)
	err := c.cc.Invoke(ctx, VideoRpc_GetAuthorId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoRpcClient) GetVideoListInfo(ctx context.Context, in *GetVideoListInfoReq, opts ...grpc.CallOption) (*GetVideoListInfoResp, error) {
	out := new(GetVideoListInfoResp)
	err := c.cc.Invoke(ctx, VideoRpc_GetVideoListInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoRpcServer is the server API for VideoRpc service.
// All implementations must embed UnimplementedVideoRpcServer
// for forward compatibility
type VideoRpcServer interface {
	GetAuthorId(context.Context, *GetAuthorIdReq) (*GetAuthorIdResp, error)
	GetVideoListInfo(context.Context, *GetVideoListInfoReq) (*GetVideoListInfoResp, error)
	mustEmbedUnimplementedVideoRpcServer()
}

// UnimplementedVideoRpcServer must be embedded to have forward compatible implementations.
type UnimplementedVideoRpcServer struct {
}

func (UnimplementedVideoRpcServer) GetAuthorId(context.Context, *GetAuthorIdReq) (*GetAuthorIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorId not implemented")
}
func (UnimplementedVideoRpcServer) GetVideoListInfo(context.Context, *GetVideoListInfoReq) (*GetVideoListInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoListInfo not implemented")
}
func (UnimplementedVideoRpcServer) mustEmbedUnimplementedVideoRpcServer() {}

// UnsafeVideoRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoRpcServer will
// result in compilation errors.
type UnsafeVideoRpcServer interface {
	mustEmbedUnimplementedVideoRpcServer()
}

func RegisterVideoRpcServer(s grpc.ServiceRegistrar, srv VideoRpcServer) {
	s.RegisterService(&VideoRpc_ServiceDesc, srv)
}

func _VideoRpc_GetAuthorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoRpcServer).GetAuthorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoRpc_GetAuthorId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoRpcServer).GetAuthorId(ctx, req.(*GetAuthorIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoRpc_GetVideoListInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoListInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoRpcServer).GetVideoListInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoRpc_GetVideoListInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoRpcServer).GetVideoListInfo(ctx, req.(*GetVideoListInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoRpc_ServiceDesc is the grpc.ServiceDesc for VideoRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.VideoRpc",
	HandlerType: (*VideoRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthorId",
			Handler:    _VideoRpc_GetAuthorId_Handler,
		},
		{
			MethodName: "GetVideoListInfo",
			Handler:    _VideoRpc_GetVideoListInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video.proto",
}
