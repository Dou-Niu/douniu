// Code generated by goctl. DO NOT EDIT.
// Source: favorite.proto

package favoriterpc

import (
	"context"

	"douniu/server/favorite/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddCollectionRequest            = pb.AddCollectionRequest
	AddCollectionResponse           = pb.AddCollectionResponse
	AddFavoriteRequest              = pb.AddFavoriteRequest
	AddFavoriteResponse             = pb.AddFavoriteResponse
	DelCollectionRequest            = pb.DelCollectionRequest
	DelCollectionResponse           = pb.DelCollectionResponse
	DelFavoriteRequest              = pb.DelFavoriteRequest
	DelFavoriteResponse             = pb.DelFavoriteResponse
	GetFavoriteVideoIdListRequest   = pb.GetFavoriteVideoIdListRequest
	GetFavoriteVideoListIdResponse  = pb.GetFavoriteVideoListIdResponse
	GetUserCollectionCountRequest   = pb.GetUserCollectionCountRequest
	GetUserCollectionCountResponse  = pb.GetUserCollectionCountResponse
	GetUserCollectionIdListRequest  = pb.GetUserCollectionIdListRequest
	GetUserCollectionIdListResponse = pb.GetUserCollectionIdListResponse
	GetUserFavoriteCountRequest     = pb.GetUserFavoriteCountRequest
	GetUserFavoriteCountResponse    = pb.GetUserFavoriteCountResponse
	GetUserFavoritedCountRequest    = pb.GetUserFavoritedCountRequest
	GetUserFavoritedCountResponse   = pb.GetUserFavoritedCountResponse
	GetVideoCollectionCountRequest  = pb.GetVideoCollectionCountRequest
	GetVideoCollectionCountResponse = pb.GetVideoCollectionCountResponse
	GetVideoFavoriteCountRequest    = pb.GetVideoFavoriteCountRequest
	GetVideoFavoriteCountResponse   = pb.GetVideoFavoriteCountResponse
	IsFavoriteRequest               = pb.IsFavoriteRequest
	IsFavoriteResponse              = pb.IsFavoriteResponse

	FavoriteRpc interface {
		AddFavorite(ctx context.Context, in *AddFavoriteRequest, opts ...grpc.CallOption) (*AddFavoriteResponse, error)
		DelFavorite(ctx context.Context, in *DelFavoriteRequest, opts ...grpc.CallOption) (*DelFavoriteResponse, error)
		GetVideoFavoriteCount(ctx context.Context, in *GetVideoFavoriteCountRequest, opts ...grpc.CallOption) (*GetVideoFavoriteCountResponse, error)
		GetUserFavoriteCount(ctx context.Context, in *GetUserFavoriteCountRequest, opts ...grpc.CallOption) (*GetUserFavoriteCountResponse, error)
		GetUserFavoritedCount(ctx context.Context, in *GetUserFavoritedCountRequest, opts ...grpc.CallOption) (*GetUserFavoritedCountResponse, error)
		IsFavorite(ctx context.Context, in *IsFavoriteRequest, opts ...grpc.CallOption) (*IsFavoriteResponse, error)
		GetFavoriteVideoIdList(ctx context.Context, in *GetFavoriteVideoIdListRequest, opts ...grpc.CallOption) (*GetFavoriteVideoListIdResponse, error)
		AddCollection(ctx context.Context, in *AddCollectionRequest, opts ...grpc.CallOption) (*AddCollectionResponse, error)
		DelCollection(ctx context.Context, in *DelCollectionRequest, opts ...grpc.CallOption) (*DelCollectionResponse, error)
		GetUserCollectionList(ctx context.Context, in *GetUserCollectionIdListRequest, opts ...grpc.CallOption) (*GetUserCollectionIdListResponse, error)
		GetUserCollectionCount(ctx context.Context, in *GetUserCollectionCountRequest, opts ...grpc.CallOption) (*GetUserCollectionCountResponse, error)
		GetVideoCollectionCount(ctx context.Context, in *GetVideoCollectionCountRequest, opts ...grpc.CallOption) (*GetVideoCollectionCountResponse, error)
	}

	defaultFavoriteRpc struct {
		cli zrpc.Client
	}
)

func NewFavoriteRpc(cli zrpc.Client) FavoriteRpc {
	return &defaultFavoriteRpc{
		cli: cli,
	}
}

func (m *defaultFavoriteRpc) AddFavorite(ctx context.Context, in *AddFavoriteRequest, opts ...grpc.CallOption) (*AddFavoriteResponse, error) {
	client := pb.NewFavoriteRpcClient(m.cli.Conn())
	return client.AddFavorite(ctx, in, opts...)
}

func (m *defaultFavoriteRpc) DelFavorite(ctx context.Context, in *DelFavoriteRequest, opts ...grpc.CallOption) (*DelFavoriteResponse, error) {
	client := pb.NewFavoriteRpcClient(m.cli.Conn())
	return client.DelFavorite(ctx, in, opts...)
}

func (m *defaultFavoriteRpc) GetVideoFavoriteCount(ctx context.Context, in *GetVideoFavoriteCountRequest, opts ...grpc.CallOption) (*GetVideoFavoriteCountResponse, error) {
	client := pb.NewFavoriteRpcClient(m.cli.Conn())
	return client.GetVideoFavoriteCount(ctx, in, opts...)
}

func (m *defaultFavoriteRpc) GetUserFavoriteCount(ctx context.Context, in *GetUserFavoriteCountRequest, opts ...grpc.CallOption) (*GetUserFavoriteCountResponse, error) {
	client := pb.NewFavoriteRpcClient(m.cli.Conn())
	return client.GetUserFavoriteCount(ctx, in, opts...)
}

func (m *defaultFavoriteRpc) GetUserFavoritedCount(ctx context.Context, in *GetUserFavoritedCountRequest, opts ...grpc.CallOption) (*GetUserFavoritedCountResponse, error) {
	client := pb.NewFavoriteRpcClient(m.cli.Conn())
	return client.GetUserFavoritedCount(ctx, in, opts...)
}

func (m *defaultFavoriteRpc) IsFavorite(ctx context.Context, in *IsFavoriteRequest, opts ...grpc.CallOption) (*IsFavoriteResponse, error) {
	client := pb.NewFavoriteRpcClient(m.cli.Conn())
	return client.IsFavorite(ctx, in, opts...)
}

func (m *defaultFavoriteRpc) GetFavoriteVideoIdList(ctx context.Context, in *GetFavoriteVideoIdListRequest, opts ...grpc.CallOption) (*GetFavoriteVideoListIdResponse, error) {
	client := pb.NewFavoriteRpcClient(m.cli.Conn())
	return client.GetFavoriteVideoIdList(ctx, in, opts...)
}

func (m *defaultFavoriteRpc) AddCollection(ctx context.Context, in *AddCollectionRequest, opts ...grpc.CallOption) (*AddCollectionResponse, error) {
	client := pb.NewFavoriteRpcClient(m.cli.Conn())
	return client.AddCollection(ctx, in, opts...)
}

func (m *defaultFavoriteRpc) DelCollection(ctx context.Context, in *DelCollectionRequest, opts ...grpc.CallOption) (*DelCollectionResponse, error) {
	client := pb.NewFavoriteRpcClient(m.cli.Conn())
	return client.DelCollection(ctx, in, opts...)
}

func (m *defaultFavoriteRpc) GetUserCollectionList(ctx context.Context, in *GetUserCollectionIdListRequest, opts ...grpc.CallOption) (*GetUserCollectionIdListResponse, error) {
	client := pb.NewFavoriteRpcClient(m.cli.Conn())
	return client.GetUserCollectionList(ctx, in, opts...)
}

func (m *defaultFavoriteRpc) GetUserCollectionCount(ctx context.Context, in *GetUserCollectionCountRequest, opts ...grpc.CallOption) (*GetUserCollectionCountResponse, error) {
	client := pb.NewFavoriteRpcClient(m.cli.Conn())
	return client.GetUserCollectionCount(ctx, in, opts...)
}

func (m *defaultFavoriteRpc) GetVideoCollectionCount(ctx context.Context, in *GetVideoCollectionCountRequest, opts ...grpc.CallOption) (*GetVideoCollectionCountResponse, error) {
	client := pb.NewFavoriteRpcClient(m.cli.Conn())
	return client.GetVideoCollectionCount(ctx, in, opts...)
}
