// Code generated by goctl. DO NOT EDIT.
// Source: video.proto

package videorpc

import (
	"context"

	"douniu/server/video/rpc/types/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CommonResp           = pb.CommonResp
	GetAuthorIdReq       = pb.GetAuthorIdReq
	GetAuthorIdResp      = pb.GetAuthorIdResp
	GetVideoListInfoReq  = pb.GetVideoListInfoReq
	GetVideoListInfoResp = pb.GetVideoListInfoResp
	PublishVideoReq      = pb.PublishVideoReq
	User                 = pb.User
	Video                = pb.Video

	VideoRpc interface {
		GetAuthorId(ctx context.Context, in *GetAuthorIdReq, opts ...grpc.CallOption) (*GetAuthorIdResp, error)
		GetVideoListInfo(ctx context.Context, in *GetVideoListInfoReq, opts ...grpc.CallOption) (*GetVideoListInfoResp, error)
		PublishVideo(ctx context.Context, in *PublishVideoReq, opts ...grpc.CallOption) (*CommonResp, error)
	}

	defaultVideoRpc struct {
		cli zrpc.Client
	}
)

func NewVideoRpc(cli zrpc.Client) VideoRpc {
	return &defaultVideoRpc{
		cli: cli,
	}
}

func (m *defaultVideoRpc) GetAuthorId(ctx context.Context, in *GetAuthorIdReq, opts ...grpc.CallOption) (*GetAuthorIdResp, error) {
	client := pb.NewVideoRpcClient(m.cli.Conn())
	return client.GetAuthorId(ctx, in, opts...)
}

func (m *defaultVideoRpc) GetVideoListInfo(ctx context.Context, in *GetVideoListInfoReq, opts ...grpc.CallOption) (*GetVideoListInfoResp, error) {
	client := pb.NewVideoRpcClient(m.cli.Conn())
	return client.GetVideoListInfo(ctx, in, opts...)
}

func (m *defaultVideoRpc) PublishVideo(ctx context.Context, in *PublishVideoReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := pb.NewVideoRpcClient(m.cli.Conn())
	return client.PublishVideo(ctx, in, opts...)
}
