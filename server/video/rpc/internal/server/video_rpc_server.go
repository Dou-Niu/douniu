// Code generated by goctl. DO NOT EDIT.
// Source: video.proto

package server

import (
	"context"

	"douniu/server/video/rpc/internal/logic"
	"douniu/server/video/rpc/internal/svc"
	"douniu/server/video/rpc/types/pb"
)

type VideoRpcServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedVideoRpcServer
}

func NewVideoRpcServer(svcCtx *svc.ServiceContext) *VideoRpcServer {
	return &VideoRpcServer{
		svcCtx: svcCtx,
	}
}

func (s *VideoRpcServer) GetAuthorId(ctx context.Context, in *pb.GetAuthorIdReq) (*pb.GetAuthorIdResp, error) {
	l := logic.NewGetAuthorIdLogic(ctx, s.svcCtx)
	return l.GetAuthorId(in)
}

func (s *VideoRpcServer) GetWorkCount(ctx context.Context, in *pb.WorkCountReq) (*pb.WorkCountResp, error) {
	l := logic.NewGetWorkCountLogic(ctx, s.svcCtx)
	return l.GetWorkCount(in)
}

func (s *VideoRpcServer) GetVideoListInfo(ctx context.Context, in *pb.GetVideoListInfoReq) (*pb.GetVideoListInfoResp, error) {
	l := logic.NewGetVideoListInfoLogic(ctx, s.svcCtx)
	return l.GetVideoListInfo(in)
}

func (s *VideoRpcServer) PublishVideo(ctx context.Context, in *pb.PublishVideoReq) (*pb.CommonResp, error) {
	l := logic.NewPublishVideoLogic(ctx, s.svcCtx)
	return l.PublishVideo(in)
}

func (s *VideoRpcServer) FeedHome(ctx context.Context, in *pb.FeedHomeReq) (*pb.FeedHomeResp, error) {
	l := logic.NewFeedHomeLogic(ctx, s.svcCtx)
	return l.FeedHome(in)
}

func (s *VideoRpcServer) FeedHot(ctx context.Context, in *pb.FeedHotReq) (*pb.FeedHotResp, error) {
	l := logic.NewFeedHotLogic(ctx, s.svcCtx)
	return l.FeedHot(in)
}

func (s *VideoRpcServer) FeedUser(ctx context.Context, in *pb.FeedUserReq) (*pb.FeedResp, error) {
	l := logic.NewFeedUserLogic(ctx, s.svcCtx)
	return l.FeedUser(in)
}

func (s *VideoRpcServer) FeedFollow(ctx context.Context, in *pb.FeedFollowReq) (*pb.FeedResp, error) {
	l := logic.NewFeedFollowLogic(ctx, s.svcCtx)
	return l.FeedFollow(in)
}

func (s *VideoRpcServer) FeedPartition(ctx context.Context, in *pb.FeedPartitionReq) (*pb.FeedResp, error) {
	l := logic.NewFeedPartitionLogic(ctx, s.svcCtx)
	return l.FeedPartition(in)
}

func (s *VideoRpcServer) SearchVideo(ctx context.Context, in *pb.SearchVideoReq) (*pb.FeedResp, error) {
	l := logic.NewSearchVideoLogic(ctx, s.svcCtx)
	return l.SearchVideo(in)
}

func (s *VideoRpcServer) DeleteVideo(ctx context.Context, in *pb.DeleteVideoReq) (*pb.CommonResp, error) {
	l := logic.NewDeleteVideoLogic(ctx, s.svcCtx)
	return l.DeleteVideo(in)
}
