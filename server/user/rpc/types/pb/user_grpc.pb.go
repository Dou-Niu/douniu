// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserRpc_SendVerificationCode_FullMethodName      = "/user.UserRpc/SendVerificationCode"
	UserRpc_RegisterOrLoginByPhone_FullMethodName    = "/user.UserRpc/RegisterOrLoginByPhone"
	UserRpc_RegisterOrLoginByPassword_FullMethodName = "/user.UserRpc/RegisterOrLoginByPassword"
	UserRpc_ForgetPassword_FullMethodName            = "/user.UserRpc/ForgetPassword"
	UserRpc_ChangePassword_FullMethodName            = "/user.UserRpc/ChangePassword"
	UserRpc_GetUserInfo_FullMethodName               = "/user.UserRpc/GetUserInfo"
)

// UserRpcClient is the client API for UserRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRpcClient interface {
	// 发送验证码
	SendVerificationCode(ctx context.Context, in *SendVerificationCodeReq, opts ...grpc.CallOption) (*SendVerificationCodeResp, error)
	// 使用验证码进行手机号注册或登录
	RegisterOrLoginByPhone(ctx context.Context, in *RegisterOrLoginByPhoneReq, opts ...grpc.CallOption) (*RegisterOrLoginResp, error)
	// 使用密码进行手机号注册或登录
	RegisterOrLoginByPassword(ctx context.Context, in *RegisterOrLoginByPasswordReq, opts ...grpc.CallOption) (*RegisterOrLoginResp, error)
	// 忘记密码并重置密码
	ForgetPassword(ctx context.Context, in *ResetPassword, opts ...grpc.CallOption) (*CommonResp, error)
	// 修改密码
	ChangePassword(ctx context.Context, in *ResetPassword, opts ...grpc.CallOption) (*CommonResp, error)
	// 获取用户信息
	GetUserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error)
}

type userRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRpcClient(cc grpc.ClientConnInterface) UserRpcClient {
	return &userRpcClient{cc}
}

func (c *userRpcClient) SendVerificationCode(ctx context.Context, in *SendVerificationCodeReq, opts ...grpc.CallOption) (*SendVerificationCodeResp, error) {
	out := new(SendVerificationCodeResp)
	err := c.cc.Invoke(ctx, UserRpc_SendVerificationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) RegisterOrLoginByPhone(ctx context.Context, in *RegisterOrLoginByPhoneReq, opts ...grpc.CallOption) (*RegisterOrLoginResp, error) {
	out := new(RegisterOrLoginResp)
	err := c.cc.Invoke(ctx, UserRpc_RegisterOrLoginByPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) RegisterOrLoginByPassword(ctx context.Context, in *RegisterOrLoginByPasswordReq, opts ...grpc.CallOption) (*RegisterOrLoginResp, error) {
	out := new(RegisterOrLoginResp)
	err := c.cc.Invoke(ctx, UserRpc_RegisterOrLoginByPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) ForgetPassword(ctx context.Context, in *ResetPassword, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, UserRpc_ForgetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) ChangePassword(ctx context.Context, in *ResetPassword, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, UserRpc_ChangePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) GetUserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	out := new(UserInfoResp)
	err := c.cc.Invoke(ctx, UserRpc_GetUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRpcServer is the server API for UserRpc service.
// All implementations must embed UnimplementedUserRpcServer
// for forward compatibility
type UserRpcServer interface {
	// 发送验证码
	SendVerificationCode(context.Context, *SendVerificationCodeReq) (*SendVerificationCodeResp, error)
	// 使用验证码进行手机号注册或登录
	RegisterOrLoginByPhone(context.Context, *RegisterOrLoginByPhoneReq) (*RegisterOrLoginResp, error)
	// 使用密码进行手机号注册或登录
	RegisterOrLoginByPassword(context.Context, *RegisterOrLoginByPasswordReq) (*RegisterOrLoginResp, error)
	// 忘记密码并重置密码
	ForgetPassword(context.Context, *ResetPassword) (*CommonResp, error)
	// 修改密码
	ChangePassword(context.Context, *ResetPassword) (*CommonResp, error)
	// 获取用户信息
	GetUserInfo(context.Context, *UserInfoReq) (*UserInfoResp, error)
	mustEmbedUnimplementedUserRpcServer()
}

// UnimplementedUserRpcServer must be embedded to have forward compatible implementations.
type UnimplementedUserRpcServer struct {
}

func (UnimplementedUserRpcServer) SendVerificationCode(context.Context, *SendVerificationCodeReq) (*SendVerificationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerificationCode not implemented")
}
func (UnimplementedUserRpcServer) RegisterOrLoginByPhone(context.Context, *RegisterOrLoginByPhoneReq) (*RegisterOrLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOrLoginByPhone not implemented")
}
func (UnimplementedUserRpcServer) RegisterOrLoginByPassword(context.Context, *RegisterOrLoginByPasswordReq) (*RegisterOrLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOrLoginByPassword not implemented")
}
func (UnimplementedUserRpcServer) ForgetPassword(context.Context, *ResetPassword) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgetPassword not implemented")
}
func (UnimplementedUserRpcServer) ChangePassword(context.Context, *ResetPassword) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedUserRpcServer) GetUserInfo(context.Context, *UserInfoReq) (*UserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserRpcServer) mustEmbedUnimplementedUserRpcServer() {}

// UnsafeUserRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRpcServer will
// result in compilation errors.
type UnsafeUserRpcServer interface {
	mustEmbedUnimplementedUserRpcServer()
}

func RegisterUserRpcServer(s grpc.ServiceRegistrar, srv UserRpcServer) {
	s.RegisterService(&UserRpc_ServiceDesc, srv)
}

func _UserRpc_SendVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVerificationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).SendVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_SendVerificationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).SendVerificationCode(ctx, req.(*SendVerificationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_RegisterOrLoginByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterOrLoginByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).RegisterOrLoginByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_RegisterOrLoginByPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).RegisterOrLoginByPhone(ctx, req.(*RegisterOrLoginByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_RegisterOrLoginByPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterOrLoginByPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).RegisterOrLoginByPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_RegisterOrLoginByPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).RegisterOrLoginByPassword(ctx, req.(*RegisterOrLoginByPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_ForgetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).ForgetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_ForgetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).ForgetPassword(ctx, req.(*ResetPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).ChangePassword(ctx, req.(*ResetPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).GetUserInfo(ctx, req.(*UserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRpc_ServiceDesc is the grpc.ServiceDesc for UserRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserRpc",
	HandlerType: (*UserRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendVerificationCode",
			Handler:    _UserRpc_SendVerificationCode_Handler,
		},
		{
			MethodName: "RegisterOrLoginByPhone",
			Handler:    _UserRpc_RegisterOrLoginByPhone_Handler,
		},
		{
			MethodName: "RegisterOrLoginByPassword",
			Handler:    _UserRpc_RegisterOrLoginByPassword_Handler,
		},
		{
			MethodName: "ForgetPassword",
			Handler:    _UserRpc_ForgetPassword_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _UserRpc_ChangePassword_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _UserRpc_GetUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
