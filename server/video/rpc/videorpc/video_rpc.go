// Code generated by goctl. DO NOT EDIT.
// Source: video.proto

package videorpc

import (
	"context"

	"douniu/server/video/rpc/types/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CommonResp           = pb.CommonResp
	DeleteVideoReq       = pb.DeleteVideoReq
	FeedFollowReq        = pb.FeedFollowReq
	FeedHomeReq          = pb.FeedHomeReq
	FeedHomeResp         = pb.FeedHomeResp
	FeedHotReq           = pb.FeedHotReq
	FeedHotResp          = pb.FeedHotResp
	FeedPartitionReq     = pb.FeedPartitionReq
	FeedResp             = pb.FeedResp
	FeedUserReq          = pb.FeedUserReq
	GetAuthorIdReq       = pb.GetAuthorIdReq
	GetAuthorIdResp      = pb.GetAuthorIdResp
	GetVideoListInfoReq  = pb.GetVideoListInfoReq
	GetVideoListInfoResp = pb.GetVideoListInfoResp
	PublishVideoReq      = pb.PublishVideoReq
	SearchVideoReq       = pb.SearchVideoReq
	User                 = pb.User
	Video                = pb.Video
	WorkCountReq         = pb.WorkCountReq
	WorkCountResp        = pb.WorkCountResp

	VideoRpc interface {
		GetAuthorId(ctx context.Context, in *GetAuthorIdReq, opts ...grpc.CallOption) (*GetAuthorIdResp, error)
		GetWorkCount(ctx context.Context, in *WorkCountReq, opts ...grpc.CallOption) (*WorkCountResp, error)
		GetVideoListInfo(ctx context.Context, in *GetVideoListInfoReq, opts ...grpc.CallOption) (*GetVideoListInfoResp, error)
		PublishVideo(ctx context.Context, in *PublishVideoReq, opts ...grpc.CallOption) (*CommonResp, error)
		FeedHome(ctx context.Context, in *FeedHomeReq, opts ...grpc.CallOption) (*FeedHomeResp, error)
		FeedHot(ctx context.Context, in *FeedHotReq, opts ...grpc.CallOption) (*FeedHotResp, error)
		FeedUser(ctx context.Context, in *FeedUserReq, opts ...grpc.CallOption) (*FeedResp, error)
		FeedFollow(ctx context.Context, in *FeedFollowReq, opts ...grpc.CallOption) (*FeedResp, error)
		FeedPartition(ctx context.Context, in *FeedPartitionReq, opts ...grpc.CallOption) (*FeedResp, error)
		SearchVideo(ctx context.Context, in *SearchVideoReq, opts ...grpc.CallOption) (*FeedResp, error)
		DeleteVideo(ctx context.Context, in *DeleteVideoReq, opts ...grpc.CallOption) (*CommonResp, error)
	}

	defaultVideoRpc struct {
		cli zrpc.Client
	}
)

func NewVideoRpc(cli zrpc.Client) VideoRpc {
	return &defaultVideoRpc{
		cli: cli,
	}
}

func (m *defaultVideoRpc) GetAuthorId(ctx context.Context, in *GetAuthorIdReq, opts ...grpc.CallOption) (*GetAuthorIdResp, error) {
	client := pb.NewVideoRpcClient(m.cli.Conn())
	return client.GetAuthorId(ctx, in, opts...)
}

func (m *defaultVideoRpc) GetWorkCount(ctx context.Context, in *WorkCountReq, opts ...grpc.CallOption) (*WorkCountResp, error) {
	client := pb.NewVideoRpcClient(m.cli.Conn())
	return client.GetWorkCount(ctx, in, opts...)
}

func (m *defaultVideoRpc) GetVideoListInfo(ctx context.Context, in *GetVideoListInfoReq, opts ...grpc.CallOption) (*GetVideoListInfoResp, error) {
	client := pb.NewVideoRpcClient(m.cli.Conn())
	return client.GetVideoListInfo(ctx, in, opts...)
}

func (m *defaultVideoRpc) PublishVideo(ctx context.Context, in *PublishVideoReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := pb.NewVideoRpcClient(m.cli.Conn())
	return client.PublishVideo(ctx, in, opts...)
}

func (m *defaultVideoRpc) FeedHome(ctx context.Context, in *FeedHomeReq, opts ...grpc.CallOption) (*FeedHomeResp, error) {
	client := pb.NewVideoRpcClient(m.cli.Conn())
	return client.FeedHome(ctx, in, opts...)
}

func (m *defaultVideoRpc) FeedHot(ctx context.Context, in *FeedHotReq, opts ...grpc.CallOption) (*FeedHotResp, error) {
	client := pb.NewVideoRpcClient(m.cli.Conn())
	return client.FeedHot(ctx, in, opts...)
}

func (m *defaultVideoRpc) FeedUser(ctx context.Context, in *FeedUserReq, opts ...grpc.CallOption) (*FeedResp, error) {
	client := pb.NewVideoRpcClient(m.cli.Conn())
	return client.FeedUser(ctx, in, opts...)
}

func (m *defaultVideoRpc) FeedFollow(ctx context.Context, in *FeedFollowReq, opts ...grpc.CallOption) (*FeedResp, error) {
	client := pb.NewVideoRpcClient(m.cli.Conn())
	return client.FeedFollow(ctx, in, opts...)
}

func (m *defaultVideoRpc) FeedPartition(ctx context.Context, in *FeedPartitionReq, opts ...grpc.CallOption) (*FeedResp, error) {
	client := pb.NewVideoRpcClient(m.cli.Conn())
	return client.FeedPartition(ctx, in, opts...)
}

func (m *defaultVideoRpc) SearchVideo(ctx context.Context, in *SearchVideoReq, opts ...grpc.CallOption) (*FeedResp, error) {
	client := pb.NewVideoRpcClient(m.cli.Conn())
	return client.SearchVideo(ctx, in, opts...)
}

func (m *defaultVideoRpc) DeleteVideo(ctx context.Context, in *DeleteVideoReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := pb.NewVideoRpcClient(m.cli.Conn())
	return client.DeleteVideo(ctx, in, opts...)
}
