// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserApi_SendVerificationCode_FullMethodName      = "/user.UserApi/SendVerificationCode"
	UserApi_RegisterOrLoginByPhone_FullMethodName    = "/user.UserApi/RegisterOrLoginByPhone"
	UserApi_RegisterOrLoginByPassword_FullMethodName = "/user.UserApi/RegisterOrLoginByPassword"
	UserApi_ForgetPassword_FullMethodName            = "/user.UserApi/ForgetPassword"
	UserApi_ChangePassword_FullMethodName            = "/user.UserApi/ChangePassword"
	UserApi_GetUserInfo_FullMethodName               = "/user.UserApi/GetUserInfo"
)

// UserApiClient is the client API for UserApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserApiClient interface {
	// 发送验证码
	SendVerificationCode(ctx context.Context, in *SendVerificationCodeReq, opts ...grpc.CallOption) (*SendVerificationCodeResp, error)
	// 使用验证码进行手机号注册或登录
	RegisterOrLoginByPhone(ctx context.Context, in *RegisterOrLoginByPhoneReq, opts ...grpc.CallOption) (*RegisterOrLoginResp, error)
	// 使用密码进行手机号注册或登录
	RegisterOrLoginByPassword(ctx context.Context, in *RegisterOrLoginByPasswordReq, opts ...grpc.CallOption) (*RegisterOrLoginResp, error)
	// 忘记密码并重置密码
	ForgetPassword(ctx context.Context, in *ResetPassword, opts ...grpc.CallOption) (*CommonResp, error)
	// 修改密码
	ChangePassword(ctx context.Context, in *ResetPassword, opts ...grpc.CallOption) (*CommonResp, error)
	// 获取用户信息
	GetUserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error)
}

type userApiClient struct {
	cc grpc.ClientConnInterface
}

func NewUserApiClient(cc grpc.ClientConnInterface) UserApiClient {
	return &userApiClient{cc}
}

func (c *userApiClient) SendVerificationCode(ctx context.Context, in *SendVerificationCodeReq, opts ...grpc.CallOption) (*SendVerificationCodeResp, error) {
	out := new(SendVerificationCodeResp)
	err := c.cc.Invoke(ctx, UserApi_SendVerificationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userApiClient) RegisterOrLoginByPhone(ctx context.Context, in *RegisterOrLoginByPhoneReq, opts ...grpc.CallOption) (*RegisterOrLoginResp, error) {
	out := new(RegisterOrLoginResp)
	err := c.cc.Invoke(ctx, UserApi_RegisterOrLoginByPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userApiClient) RegisterOrLoginByPassword(ctx context.Context, in *RegisterOrLoginByPasswordReq, opts ...grpc.CallOption) (*RegisterOrLoginResp, error) {
	out := new(RegisterOrLoginResp)
	err := c.cc.Invoke(ctx, UserApi_RegisterOrLoginByPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userApiClient) ForgetPassword(ctx context.Context, in *ResetPassword, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, UserApi_ForgetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userApiClient) ChangePassword(ctx context.Context, in *ResetPassword, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, UserApi_ChangePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userApiClient) GetUserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	out := new(UserInfoResp)
	err := c.cc.Invoke(ctx, UserApi_GetUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserApiServer is the server API for UserApi service.
// All implementations must embed UnimplementedUserApiServer
// for forward compatibility
type UserApiServer interface {
	// 发送验证码
	SendVerificationCode(context.Context, *SendVerificationCodeReq) (*SendVerificationCodeResp, error)
	// 使用验证码进行手机号注册或登录
	RegisterOrLoginByPhone(context.Context, *RegisterOrLoginByPhoneReq) (*RegisterOrLoginResp, error)
	// 使用密码进行手机号注册或登录
	RegisterOrLoginByPassword(context.Context, *RegisterOrLoginByPasswordReq) (*RegisterOrLoginResp, error)
	// 忘记密码并重置密码
	ForgetPassword(context.Context, *ResetPassword) (*CommonResp, error)
	// 修改密码
	ChangePassword(context.Context, *ResetPassword) (*CommonResp, error)
	// 获取用户信息
	GetUserInfo(context.Context, *UserInfoReq) (*UserInfoResp, error)
	mustEmbedUnimplementedUserApiServer()
}

// UnimplementedUserApiServer must be embedded to have forward compatible implementations.
type UnimplementedUserApiServer struct {
}

func (UnimplementedUserApiServer) SendVerificationCode(context.Context, *SendVerificationCodeReq) (*SendVerificationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerificationCode not implemented")
}
func (UnimplementedUserApiServer) RegisterOrLoginByPhone(context.Context, *RegisterOrLoginByPhoneReq) (*RegisterOrLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOrLoginByPhone not implemented")
}
func (UnimplementedUserApiServer) RegisterOrLoginByPassword(context.Context, *RegisterOrLoginByPasswordReq) (*RegisterOrLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOrLoginByPassword not implemented")
}
func (UnimplementedUserApiServer) ForgetPassword(context.Context, *ResetPassword) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgetPassword not implemented")
}
func (UnimplementedUserApiServer) ChangePassword(context.Context, *ResetPassword) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedUserApiServer) GetUserInfo(context.Context, *UserInfoReq) (*UserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserApiServer) mustEmbedUnimplementedUserApiServer() {}

// UnsafeUserApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserApiServer will
// result in compilation errors.
type UnsafeUserApiServer interface {
	mustEmbedUnimplementedUserApiServer()
}

func RegisterUserApiServer(s grpc.ServiceRegistrar, srv UserApiServer) {
	s.RegisterService(&UserApi_ServiceDesc, srv)
}

func _UserApi_SendVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVerificationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserApiServer).SendVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserApi_SendVerificationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserApiServer).SendVerificationCode(ctx, req.(*SendVerificationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserApi_RegisterOrLoginByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterOrLoginByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserApiServer).RegisterOrLoginByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserApi_RegisterOrLoginByPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserApiServer).RegisterOrLoginByPhone(ctx, req.(*RegisterOrLoginByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserApi_RegisterOrLoginByPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterOrLoginByPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserApiServer).RegisterOrLoginByPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserApi_RegisterOrLoginByPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserApiServer).RegisterOrLoginByPassword(ctx, req.(*RegisterOrLoginByPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserApi_ForgetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserApiServer).ForgetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserApi_ForgetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserApiServer).ForgetPassword(ctx, req.(*ResetPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserApi_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserApiServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserApi_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserApiServer).ChangePassword(ctx, req.(*ResetPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserApi_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserApiServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserApi_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserApiServer).GetUserInfo(ctx, req.(*UserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserApi_ServiceDesc is the grpc.ServiceDesc for UserApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserApi",
	HandlerType: (*UserApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendVerificationCode",
			Handler:    _UserApi_SendVerificationCode_Handler,
		},
		{
			MethodName: "RegisterOrLoginByPhone",
			Handler:    _UserApi_RegisterOrLoginByPhone_Handler,
		},
		{
			MethodName: "RegisterOrLoginByPassword",
			Handler:    _UserApi_RegisterOrLoginByPassword_Handler,
		},
		{
			MethodName: "ForgetPassword",
			Handler:    _UserApi_ForgetPassword_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _UserApi_ChangePassword_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _UserApi_GetUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
